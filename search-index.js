var searchIndex = {};
searchIndex['js'] = {"items":[[0,"","js","This is a library with seperate modules for Javascript parsing, the Javascript\nstandard library, and Javascript execution through LibJIT"],[0,"front","","The backend-defining traits and the Javascript standard library"],[0,"macro","js::front","A macro which makes Javascript objects with pretty Rust syntax"],[15,"js!","js::front::macro",""],[15,"js_extend!","",""],[0,"run","js::front","Backend-defining traits"],[0,"compiler","js::front::run","For compiling Javascript values"],[6,"Compiler","js::front::run::compiler","A compiler that transforms expressions into their compiled\nform, typically through a library such as LibJIT or LLVM."],[10,"compile","","Compile an expression",0],[10,"compile_unary_op","","Compile a unary operation",0],[10,"compile_bin_op","","Compile a binary operation",0],[10,"compile_num_op","","Compile a numeric operation",0],[10,"compile_bit_op","","Compile a bitwise operation",0],[10,"compile_comp_op","","Compile a comparitive operation",0],[10,"compile_log_op","","Compile a logical operation",0],[10,"compile_const","","Compile a constant",0],[10,"compile_local","","Compile a local variable",0],[10,"compile_block","","Compile a block of expressions",0],[10,"compile_get_const_field","","Compile constant field access for an object",0],[10,"compile_get_field","","Compile field access for an object",0],[10,"compile_call","","Compile a call to a function with some arguments",0],[10,"compile_while_loop","","Compile a while loop",0],[10,"compile_if","","Compile an if statement",0],[10,"compile_switch","","Compile a switch statement",0],[10,"compile_object_decl","","Compile an object declaration",0],[10,"compile_array_decl","","Compile an array declaration",0],[10,"compile_function_decl","","Compile a function declaration",0],[10,"compile_arrow_function_decl","","Compile an arrow function declaration",0],[10,"compile_construct","","Compile a construction of an object",0],[10,"compile_return","","Compile a return expression",0],[10,"compile_throw","","Compile a throw expression",0],[10,"compile_assign","","Compile an assignment",0],[10,"compile_var_decl","","Compile a variable declaration",0],[10,"compile_typeof","","Compile a typeof expression",0],[0,"executor","js::front::run","For executing the compiled Javascript values"],[6,"Executor","js::front::run::executor","An execution engine which runs the native code\n* generated by the `Compiler`"],[9,"get_global_obj","","Get the global object associated with this executor",1],[10,"get_global","","Get a field of the global object",1],[10,"set_global","","Set a field of the global object",1],[9,"execute","","Execute a compiled expression",1],[0,"stdlib","js::front","The Javascript standard library"],[0,"array","js::front::stdlib","The `Array` global object"],[3,"make_array","js::front::stdlib::array","Create a new array"],[3,"_create","","Create a new `Array` object"],[3,"init","","Initialise the global object with the `Array` object"],[0,"boolean","js::front::stdlib","The `Boolean` global object"],[3,"make_boolean","js::front::stdlib::boolean","Create a new boolean"],[3,"_create","","Create a new `Boolean` object"],[3,"init","","Initialise the global object with the `Boolean` object"],[0,"console","js::front::stdlib","The `console` global object"],[3,"log","js::front::stdlib::console","Print a javascript value to the standard output stream"],[3,"error","","Print a javascript value to the standard error stream"],[3,"_create","","Create a new `console` object"],[3,"init","","Initialise the global object with the `console` object"],[0,"error","js::front::stdlib","The `Error` global objects"],[3,"make_error","js::front::stdlib::error","Create a new error"],[3,"to_string","","Get the string representation of the error"],[3,"_create","","Create a new `Error` object"],[3,"init","","Initialise the global object with the `Error` object"],[0,"function","js::front::stdlib","The `Function` global object"],[1,"Function","js::front::stdlib::function","A Javascript function"],[11,"object","","The fields associated with the function",2],[11,"repr","","This function's JIT representation",2],[11,"args","","The argument names of the function",2],[3,"_create","","Create a new `Function` object"],[3,"init","","Initialise the global object with the `Function` object"],[4,"FunctionData","",""],[10,"clone","","",2],[10,"new","","Make a new function",2],[10,"make","","Create a function from function data and arguments",2],[10,"call","","Call with some args",2],[0,"json","js::front::stdlib","The `JSON` global object"],[3,"parse","js::front::stdlib::json","Parse a JSON string into a Javascript object"],[3,"stringify","","Process a Javascript object into a JSON string"],[3,"_create","","Create a new `JSON` object"],[3,"init","","Initialise the global object with the `JSON` object"],[0,"math","js::front::stdlib","The `Math` global object"],[3,"abs","js::front::stdlib::math","Get the absolute value of a number"],[3,"acos","","Get the arccos of a number"],[3,"asin","","Get the arcsine of a number"],[3,"atan","","Get the arctangent of a number"],[3,"atan2","","Get the arctangent of a numbers"],[3,"cbrt","","Get the cubic root of a number"],[3,"ceil","","Get lowest integer above a number"],[3,"cos","","Get the cosine of a number"],[3,"exp","","Get the power to raise the natural logarithm to get the number"],[3,"floor","","Get the highest integer below a number"],[3,"log","","Get the natural logarithm of a number"],[3,"max","","Get the maximum of several numbers"],[3,"min","","Get the minimum of several numbers"],[3,"pow","","Raise a number to a power"],[3,"_random","","Generate a random floating-point number between 0 and 1"],[3,"round","","Round a number to the nearest integer"],[3,"sin","","Get the sine of a number"],[3,"sqrt","","Get the square root of a number"],[3,"tan","","Get the tangent of a number"],[3,"_create","","Create a new `Math` object"],[3,"init","","Initialise the `Math` object on the global object"],[0,"number","js::front::stdlib","The `Number` global object and related global methods"],[3,"parse_float","js::front::stdlib::number","Parse a float into a value"],[3,"parse_int","","Parse an int into a value"],[3,"is_finite","","Check if a value when converted to a number is finite"],[3,"strict_is_finite","","Check if a number is finite"],[3,"is_nan","","Check if a value when converted to a number is equal to NaN"],[3,"strict_is_nan","","Check if a number is equal to NaN"],[3,"_create","","Create a new `Number` object"],[3,"init","","Initialise the parse functions and `Number` on the global object"],[0,"object","js::front::stdlib","The `Object` global object"],[1,"Property","js::front::stdlib::object","A Javascript property"],[11,"configurable","","If the type of this can be changed and this can be deleted",3],[11,"enumerable","","If the property shows up in enumeration of the object",3],[11,"writable","","If this property can be changed with an assignment",3],[11,"value","","The value associated with the property",3],[11,"get","","The function serving as getter",3],[11,"set","","The function serving as setter",3],[3,"make_object","","Create a new object"],[3,"get_proto_of","","Get the prototype of an object"],[3,"set_proto_of","","Set the prototype of an object"],[3,"define_prop","","Define a property in an object"],[3,"to_string","","To string"],[3,"has_own_prop","","Check if it has a property"],[3,"_create","","Create a new `Object` object"],[3,"init","","Initialise the `Object` object on the global object"],[4,"ObjectData","",""],[5,"PROTOTYPE","",""],[5,"INSTANCE_PROTOTYPE","",""],[10,"clone","","",3],[10,"new","","Make a new property with the given value",3],[10,"to_value","","",3],[10,"from_value","","",3],[0,"string","js::front::stdlib","The `String` global object"],[3,"make_string","js::front::stdlib::string","Create new string"],[3,"get_string_length","","Get a string's length"],[3,"_create","","Create a new `String` object"],[3,"init","","Initialise the `String` object on the global object"],[0,"uri","js::front::stdlib","The global URI methods"],[3,"encode_uri","js::front::stdlib::uri","Encode a URI"],[3,"encode_uri_component","","Encode a URI component\nRust uses RFC 3986, but standard Javascript doesn't, this will need a fix"],[3,"decode_uri","","Decode a URI"],[3,"decode_uri_component","","Decode a URI component\nRust uses RFC 3986, but standard Javascript doesn't, this will need a fix"],[3,"init","","Initialise the URI functions on the global object"],[0,"value","js::front::stdlib","An arbritary Javascript value"],[1,"Value","js::front::stdlib::value","A Garbage-collected Javascript value as represented in the interpreter"],[11,"ptr","","The garbage-collected pointer",4],[2,"ValueData","","A Javascript value"],[12,"VNull","","`null` - A null value, for when a value doesn't exist",5],[12,"VUndefined","","`undefined` - An undefined value, for when a field or index doesn't exist",5],[12,"VBoolean","","`boolean` - A `true` / `false` value, for if a certain criteria is met",5],[12,"VString","","`String` - A UTF-8 string, such as `\"Hello, world\"`",5],[12,"VNumber","","`Number` - A 64-bit floating point number, such as `3.1415`",5],[12,"VInteger","","`Number` - A 32-bit integer, such as `42`",5],[12,"VObject","","`Object` - An object, such as `Math`, represented by a binary tree of string keys to Javascript values",5],[12,"VFunction","","`Function` - A runnable block of code, such as `Math.sqrt`, which can take some variables and return a useful value or act upon an object",5],[3,"from_value","","A utility function that just calls FromValue::from_value"],[3,"to_value","","A utility function that just calls ToValue::to_value"],[4,"ResultValue","","The result of a Javascript expression is represented like this so it can succeed (`Ok`) or fail (`Err`)"],[6,"ToValue","","Conversion to Javascript values from Rust values"],[9,"to_value","","Convert this value to a Rust value",6],[6,"FromValue","","Conversion to Rust values from Javascript values"],[9,"from_value","","Convert this value to a Javascript value",7],[10,"clone","","",4],[10,"deref","","",4],[10,"clone","","",5],[10,"new","","Move some value data into a new value",4],[10,"new_global","","Create a new global object",4],[10,"new_obj","","Returns a new empty object",4],[10,"is_object","","Returns true if the value is an object",4],[10,"is_undefined","","Returns true if the value is undefined",4],[10,"is_null","","Returns true if the value is null",4],[10,"is_null_or_undefined","","Returns true if the value is null or undefined",4],[10,"is_double","","Returns true if the value is a 64-bit floating-point number",4],[10,"is_string","","Returns true if the value is a string",4],[10,"is_true","","Returns true if the value is true",4],[10,"to_num","","Converts the value into a 64-bit floating point number",4],[10,"to_int","","Converts the value into a 32-bit integer",4],[10,"get_prop","","Resolve the property in the object",4],[10,"get_field","","Resolve the property in the object and get its value, or undefined if this is not an object or the field doesn't exist",4],[10,"set_field","","Set the field in the value",4],[10,"set_prop","","Set the property in the value",4],[10,"from_json","","Convert from a JSON value to a JS value",4],[10,"get_type","","Get the type of the value",4],[10,"undefined","","Get the value for undefined",4],[10,"fmt","","",4],[10,"eq","","",4],[10,"to_json","","",4],[10,"add","","",4],[10,"sub","","",4],[10,"mul","","",4],[10,"div","","",4],[10,"rem","","",4],[10,"bitand","","",4],[10,"bitor","","",4],[10,"bitxor","","",4],[10,"shl","","",4],[10,"shr","","",4],[10,"not","","",4],[10,"neg","","",4],[10,"lt","","",4],[10,"le","","",4],[10,"gt","","",4],[10,"ge","","",4],[10,"to_value","","",4],[10,"from_value","","",4],[10,"to_value","collections::string","",8],[10,"from_value","","",8],[10,"to_value","collections::vec","",9],[10,"from_value","","",9],[10,"to_value","js::front::stdlib::value","",10],[10,"from_value","","",10],[10,"to_value","serialize::json","",11],[10,"from_value","","",11],[10,"to_value","core::option","",12],[10,"from_value","","",12],[0,"back","js","The default backend implemented on top of LibJIT"],[0,"compiler","js::back","The compiler, which transforms Javascript expressions to LibJIT IR"],[1,"JitCompiler","js::back::compiler","A compiler using the LibJIT backend"],[11,"curr","","",13],[10,"new","","Construct a new JIT Compiler on the given context",13],[10,"compile_const","","",13],[10,"compile_block","","",13],[10,"compile_num_op","","",13],[10,"compile_bit_op","","",13],[10,"compile_log_op","","",13],[10,"compile_comp_op","","",13],[10,"compile_unary_op","","",13],[10,"compile_return","","",13],[0,"executor","js::back","The executor, which runs the LibJIT IR by compiling it then running it"],[1,"JitExecutor","js::back::executor","A JIT executor"],[11,"global","","",14],[10,"new","","Create a new JIT executor",14],[10,"get_global_obj","","",14],[10,"execute","","",14],[0,"syntax","js","Javascript parsing and syntax"],[0,"ast","js::syntax","The Javascript Abstract Syntax Tree"],[0,"constant","js::syntax::ast","Constants"],[2,"Const","js::syntax::ast::constant","A Javascript constant"],[12,"CString","","A UTF-8 string, such as `\"Hello, world\"`",15],[12,"CRegExp","","A regular expression, such as `/where('s| is) [wW]ally/`",15],[12,"CNum","","A 64-bit floating-point number, such as `3.1415`",15],[12,"CInt","","A 32-bit integer, such as `42`",15],[12,"CBool","","A boolean, which is either `true` or `false` and is used to check if criteria are met",15],[12,"CNull","","The `null` value, which represents a non-existant value",15],[12,"CUndefined","","The `undefined` value, which represents a field or index that doesn't exist",15],[10,"eq","","",15],[10,"ne","","",15],[10,"clone","","",15],[10,"fmt","","",15],[0,"expr","js::syntax::ast","Expressions"],[1,"Expr","js::syntax::ast::expr","A Javascript expression, including its position"],[11,"def","","The expression definition",16],[11,"start","","The starting position",16],[11,"end","","The ending position",16],[2,"ExprDef","","A Javascript expression"],[12,"BinOpExpr","","Run a operation between 2 expressions",17],[12,"UnaryOpExpr","","Run an operation on a value",17],[12,"ConstExpr","","Make a constant value",17],[12,"BlockExpr","","Run several expressions from top-to-bottom",17],[12,"LocalExpr","","Load a reference to a value",17],[12,"GetConstFieldExpr","","Gets the constant field of a value",17],[12,"GetFieldExpr","","Gets the field of a value",17],[12,"CallExpr","","Call a function with some values",17],[12,"WhileLoopExpr","","Repeatedly run an expression while the conditional expression resolves to true",17],[12,"IfExpr","","Check if a conditional expression is true and run an expression if it is and another expression if it isn't",17],[12,"SwitchExpr","","Run blocks whose cases match the expression",17],[12,"ObjectDeclExpr","","Create an object out of the binary tree given",17],[12,"ArrayDeclExpr","","Create an array with items inside",17],[12,"FunctionDeclExpr","","Create a function with the given name, arguments, and expression",17],[12,"ArrowFunctionDeclExpr","","Create an arrow function with the given arguments and expression",17],[12,"ConstructExpr","","Construct an object from the function and arguments given",17],[12,"ReturnExpr","","Return the expression from a function",17],[12,"ThrowExpr","","Throw a value",17],[12,"AssignExpr","","Assign an expression to a value",17],[12,"VarDeclExpr","","A variable declaration",17],[12,"TypeOfExpr","","Return a string representing the type of the given expression",17],[10,"eq","","",16],[10,"ne","","",16],[10,"clone","","",16],[10,"new","","Create a new expression with a starting and ending position",16],[10,"fmt","","",16],[10,"eq","","",17],[10,"ne","","",17],[10,"clone","","",17],[10,"get_assoc","","",17],[10,"get_precedence","","",17],[10,"fmt","","",17],[0,"keyword","js::syntax::ast","Keywords"],[2,"Keyword","js::syntax::ast::keyword","A Javascript Keyword"],[12,"KBreak","","The `break` keyword",18],[12,"KCase","","The `case` keyword",18],[12,"KCatch","","The `catch` keyword",18],[12,"KClass","","The `class` keyword, which is reserved for future use",18],[12,"KContinue","","The `continue` keyword",18],[12,"KDebugger","","The `debugger` keyword",18],[12,"KDefault","","The `default` keyword",18],[12,"KDelete","","The `delete` keyword",18],[12,"KDo","","The `do` keyword",18],[12,"KElse","","The `else` keyword",18],[12,"KEnum","","The `enum` keyword",18],[12,"KExtends","","The `extends` keyword",18],[12,"KFinally","","The `finally` keyword",18],[12,"KFor","","The `for` keyword",18],[12,"KFunction","","The `function` keyword",18],[12,"KIf","","The `if` keyword",18],[12,"KIn","","The `in` keyword",18],[12,"KInstanceOf","","The `instanceof` keyword",18],[12,"KImport","","The `import` keyword",18],[12,"KNew","","The `new` keyword",18],[12,"KReturn","","The `return` keyword",18],[12,"KSuper","","The `super` keyword",18],[12,"KSwitch","","The `switch` keyword",18],[12,"KThis","","The `this` keyword",18],[12,"KThrow","","The `throw` keyword",18],[12,"KTry","","The `try` keyword",18],[12,"KTypeOf","","The `typeof` keyword",18],[12,"KVar","","The `var` keyword",18],[12,"KVoid","","The `void` keyword",18],[12,"KWhile","","The `while` keyword",18],[12,"KWith","","The `with` keyword",18],[10,"eq","","",18],[10,"ne","","",18],[10,"clone","","",18],[10,"from_str","","",18],[10,"fmt","","",18],[0,"op","js::syntax::ast","Operators"],[2,"NumOp","js::syntax::ast::op","A numeric operation between 2 values"],[12,"OpAdd","","`a + b` - Addition",19],[12,"OpSub","","`a - b` - Subtraction",19],[12,"OpDiv","","`a / b` - Division",19],[12,"OpMul","","`a * b` - Multiplication",19],[12,"OpMod","","`a % b` - Modulus",19],[2,"UnaryOp","","A unary operation on a single value"],[12,"UnaryIncrementPost","","`a++` - increment the value",20],[12,"UnaryIncrementPre","","`++a` - increment the value",20],[12,"UnaryDecrementPost","","`a--` - decrement the value",20],[12,"UnaryDecrementPre","","`--a` - decrement the value",20],[12,"UnaryMinus","","`-a` - negate the value",20],[12,"UnaryPlus","","`+a` - convert to a number",20],[12,"UnaryNot","","`!a` - get the opposite of the boolean value",20],[2,"BitOp","","A bitwise operation between 2 values"],[12,"BitAnd","","`a & b` - Bitwise and",21],[12,"BitOr","","`a | b` - Bitwise or",21],[12,"BitXor","","`a ^ b` - Bitwise xor",21],[12,"BitShl","","`a << b` - Bit-shift leftwards",21],[12,"BitShr","","`a >> b` - Bit-shift rightrights",21],[2,"CompOp","","A comparitive operation between 2 values"],[12,"CompEqual","","`a == b` - Equality",22],[12,"CompNotEqual","","`a != b` - Unequality",22],[12,"CompStrictEqual","","`a === b` - Strict equality",22],[12,"CompStrictNotEqual","","`a !== b` - Strict unequality",22],[12,"CompGreaterThan","","`a > b` - If `a` is greater than `b`",22],[12,"CompGreaterThanOrEqual","","`a >= b` - If `a` is greater than or equal to `b`",22],[12,"CompLessThan","","`a < b` - If `a` is less than `b`",22],[12,"CompLessThanOrEqual","","`a <= b` - If `a` is less than or equal to `b`",22],[2,"LogOp","","A logical operation between 2 boolean values"],[12,"LogAnd","","`a && b` - Logical and",23],[12,"LogOr","","`a || b` - Logical or",23],[2,"BinOp","","A binary operation between 2 values"],[12,"BinNum","","Numeric operation",24],[12,"BinBit","","Bitwise operation",24],[12,"BinComp","","Comparitive operation",24],[12,"BinLog","","Logical operation",24],[6,"Operator","","Represents an operator"],[9,"get_assoc","","Get the associativity as a boolean that is true if it goes rightwards",25],[9,"get_precedence","","Get the precedence as an unsigned integer, where the lower it is, the more precedence/priority it has",25],[10,"get_precedence_and_assoc","","Get the precedence and associativity of this operator",25],[10,"eq","","",19],[10,"ne","","",19],[10,"clone","","",19],[10,"fmt","","",19],[10,"eq","","",20],[10,"ne","","",20],[10,"clone","","",20],[10,"fmt","","",20],[10,"eq","","",21],[10,"ne","","",21],[10,"clone","","",21],[10,"fmt","","",21],[10,"eq","","",22],[10,"ne","","",22],[10,"clone","","",22],[10,"fmt","","",22],[10,"eq","","",23],[10,"ne","","",23],[10,"clone","","",23],[10,"fmt","","",23],[10,"eq","","",24],[10,"ne","","",24],[10,"clone","","",24],[10,"get_assoc","","",24],[10,"get_precedence","","",24],[10,"fmt","","",24],[0,"pos","js::syntax::ast","Positions"],[1,"Position","js::syntax::ast::pos","A position in Javascript source code"],[11,"column_number","","The column number",26],[11,"line_number","","The line number",26],[10,"eq","","",26],[10,"ne","","",26],[10,"clone","","",26],[10,"new","","Create a new position",26],[0,"punc","js::syntax::ast","Punctuators"],[2,"Punctuator","js::syntax::ast::punc","Punctuation"],[12,"POpenBlock","","`{`",27],[12,"PCloseBlock","","`}`",27],[12,"POpenParen","","`(`",27],[12,"PCloseParen","","`)`",27],[12,"POpenBracket","","`[`",27],[12,"PCloseBracket","","`]`",27],[12,"PDot","","`.`",27],[12,"PSemicolon","","`;`",27],[12,"PComma","","`,`",27],[12,"PLessThan","","`<`",27],[12,"PGreaterThan","","`>`",27],[12,"PLessThanOrEq","","`<=`",27],[12,"PGreaterThanOrEq","","`>=`",27],[12,"PEq","","`==`",27],[12,"PNotEq","","`!=`",27],[12,"PStrictEq","","`===`",27],[12,"PStrictNotEq","","`!==`",27],[12,"PAdd","","`+`",27],[12,"PSub","","`-`",27],[12,"PMul","","`*`",27],[12,"PDiv","","`/`",27],[12,"PMod","","`%`",27],[12,"PInc","","`++`",27],[12,"PDec","","`--`",27],[12,"PLeftSh","","`<<`",27],[12,"PRightSh","","`>>`",27],[12,"PURightSh","","`>>>`",27],[12,"PAnd","","`&`",27],[12,"POr","","`|`",27],[12,"PXor","","`^`",27],[12,"PNot","","`!`",27],[12,"PNeg","","`~`",27],[12,"PBoolAnd","","`&&`",27],[12,"PBoolOr","","`||`",27],[12,"PQuestion","","`?`",27],[12,"PColon","","`:`",27],[12,"PAssign","","`=`",27],[12,"PAssignAdd","","`+=`",27],[12,"PAssignSub","","`-=`",27],[12,"PAssignMul","","`*=`",27],[12,"PAssignDiv","","`/=`",27],[12,"PAssignMod","","`%=`",27],[12,"PAssignLeftSh","","`<<=`",27],[12,"PAssignRightSh","","`>>=`",27],[12,"PAssignURightSh","","`>>>=`",27],[12,"PAssignAnd","","`&=`",27],[12,"PAssignOr","","`|=`",27],[12,"PAssignXor","","`^=`",27],[12,"PArrow","","`=>`",27],[10,"clone","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"fmt","","",27],[0,"token","js::syntax::ast","Tokens"],[1,"Token","js::syntax::ast::token","A single of token of Javascript code including its position"],[11,"data","","The token",28],[11,"pos","","The token's position",28],[2,"TokenData","","A single token of Javacript code - a single word, symbol or constant"],[12,"TBooleanLiteral","","A boolean literal, which is either `true` or `false`",29],[12,"TEOF","","The end of the file",29],[12,"TIdentifier","","An identifier",29],[12,"TKeyword","","A keyword",29],[12,"TNullLiteral","","A `null` literal",29],[12,"TNumericLiteral","","A numeric literal",29],[12,"TPunctuator","","A piece of punctuation",29],[12,"TStringLiteral","","A string literal",29],[12,"TRegularExpression","","A regular expression",29],[12,"TComment","","A comment",29],[10,"eq","","",28],[10,"ne","","",28],[10,"clone","","",28],[10,"new","","Create a new detailed token from the token data, line number and column number",28],[10,"fmt","","",28],[10,"eq","","",29],[10,"ne","","",29],[10,"clone","","",29],[10,"fmt","","",29],[0,"typer","js::syntax::ast","An expression typer"],[3,"resolve_type","js::syntax::ast::typer","Type an expression"],[0,"types","js::syntax::ast","Types"],[2,"Type","js::syntax::ast::types","Represents a Javascript type at parsing/compilation"],[12,"UndefinedType","","`undefined`",30],[12,"NullType","","`null`",30],[12,"BooleanType","","`boolean`",30],[12,"NumberType","","`number`",30],[12,"IntegerType","","`number`",30],[12,"StringType","","`string`",30],[12,"NativeObjectType","","A native object",30],[12,"FunctionType","","`function`",30],[12,"ObjectType","","`object`",30],[12,"AnyOfType","","Any of these types",30],[12,"AnyType","","Any type",30],[10,"eq","","",30],[10,"ne","","",30],[10,"clone","","",30],[10,"normalise","","Normalise the type",30],[10,"fmt","","",30],[0,"lexer","js::syntax","Parses a string stream into a sequence of tokens"],[1,"Lexer","js::syntax::lexer","A Javascript lexer"],[11,"tokens","","The list of tokens generated so far",31],[11,"line_number","","The current line number in the script",31],[11,"column_number","","The current column number in the script",31],[11,"buffer","","The reader",31],[11,"peek_buffer","","The peeked character buffer",31],[10,"new","","Creates a new lexer with empty buffers",31],[10,"lex_str","","Processes an input stream from a string into an array of tokens",31],[10,"lex","","Processes an input stream from the `buffer` into a vector of tokens",31],[0,"parser","js::syntax","Parses a sequence of tokens into expressions"],[1,"Parser","js::syntax::parser","A Javascript parser"],[11,"tokens","","The tokens being input",32],[11,"pos","","The current position within the tokens",32],[2,"ParseError","","An error encountered during parsing an expression"],[12,"Expected","","When it expected a certain kind of token, but got another as part of something",33],[12,"ExpectedExpr","","When it expected a certain expression, but got another",33],[12,"UnexpectedKeyword","","When it didn't expect this keyword",33],[12,"AbruptEnd","","When there is an abrupt end to the parsing",33],[4,"ParseResult","",""],[10,"eq","","",33],[10,"ne","","",33],[10,"clone","","",33],[10,"fmt","","",33],[10,"new","","Creates a new parser, using `tokens` as input",32],[10,"parse_all","","Parse all expressions in the token array",32],[10,"parse","","Parse a single expression",32]],"paths":[[6,"Compiler"],[6,"Executor"],[1,"Function"],[1,"Property"],[1,"Value"],[2,"ValueData"],[6,"ToValue"],[6,"FromValue"],[1,"String"],[1,"Vec"],[4,"ObjectData"],[2,"Json"],[2,"Option"],[1,"JitCompiler"],[1,"JitExecutor"],[2,"Const"],[1,"Expr"],[2,"ExprDef"],[2,"Keyword"],[2,"NumOp"],[2,"UnaryOp"],[2,"BitOp"],[2,"CompOp"],[2,"LogOp"],[2,"BinOp"],[6,"Operator"],[1,"Position"],[2,"Punctuator"],[1,"Token"],[2,"TokenData"],[2,"Type"],[1,"Lexer"],[1,"Parser"],[2,"ParseError"]]};
initSearch(searchIndex);
