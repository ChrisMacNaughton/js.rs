var searchIndex = {};
searchIndex['js.rs'] = {"items":[[0,"","js.rs","A Javascript execution command line tool"],[1,"Interactive","","An interactive command-line mode"],[11,"engine","","The execution engine to run the expressions on",0],[11,"input","","The standard input stream to read from",0],[1,"Tests","","Test against unit tests"],[1,"Runner","","An command-line script executor"],[11,"path","","The path to the script",1],[3,"main","","The main function"]],"paths":[[1,"Interactive"],[1,"Runner"]]};
searchIndex['js_syntax'] = {"items":[[0,"","js_syntax","This crate provides a Javascript parsing library with a parser,\na lexer, and Abstract Syntax Tree. The lexer started off based\noff the Kaleidocope OCaml tutorial, then it evolved off there.\n \nThe parser is based on my work on the [`hscript` project from \nHaxe](https://github.com/TomBebbington/hscript/blob/master/hscript/Parser.hx), but it's still\nvery premature and some important things are missing for now."],[0,"ast","","The Abstract Syntax Trees for Javascript tokens and expressions"],[0,"constant","js_syntax::ast","Constant AST"],[2,"Const","js_syntax::ast::constant","A Javascript constant"],[12,"CString","","A UTF-8 string, such as `\"Hello, world\"`",0],[12,"CRegExp","","A regular expression, such as `/where('s| is) [wW]ally/`",0],[12,"CNum","","A 64-bit floating-point number, such as `3.1415`",0],[12,"CInt","","A 32-bit integer, such as `42`",0],[12,"CBool","","A boolean, which is either `true` or `false` and is used to check if criteria are met",0],[12,"CNull","","The `null` value, which represents a non-existant value",0],[12,"CUndefined","","The `undefined` value, which represents a field or index that doesn't exist",0],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"fmt","","",0],[0,"expr","js_syntax::ast","Expression AST"],[1,"Expr","js_syntax::ast::expr","A Javascript expression, including its position"],[11,"def","","The expression definition",1],[11,"start","","The starting position",1],[11,"end","","The ending position",1],[2,"ExprDef","","A Javascript expression"],[12,"BinOpExpr","","Run a operation between 2 expressions",2],[12,"UnaryOpExpr","","Run an operation on a value",2],[12,"ConstExpr","","Make a constant value",2],[12,"BlockExpr","","Run several expressions from top-to-bottom",2],[12,"LocalExpr","","Load a reference to a value",2],[12,"GetConstFieldExpr","","Gets the constant field of a value",2],[12,"GetFieldExpr","","Gets the field of a value",2],[12,"CallExpr","","Call a function with some values",2],[12,"WhileLoopExpr","","Repeatedly run an expression while the conditional expression resolves to true",2],[12,"IfExpr","","Check if a conditional expression is true and run an expression if it is and another expression if it isn't",2],[12,"SwitchExpr","","Run blocks whose cases match the expression",2],[12,"ObjectDeclExpr","","Create an object out of the binary tree given",2],[12,"ArrayDeclExpr","","Create an array with items inside",2],[12,"FunctionDeclExpr","","Create a function with the given name, arguments, and expression",2],[12,"ArrowFunctionDeclExpr","","Create an arrow function with the given arguments and expression",2],[12,"ConstructExpr","","Construct an object from the function and arguments given",2],[12,"ReturnExpr","","Return the expression from a function",2],[12,"ThrowExpr","","Throw a value",2],[12,"AssignExpr","","Assign an expression to a value",2],[12,"VarDeclExpr","","A variable declaration",2],[12,"TypeOfExpr","","Return a string representing the type of the given expression",2],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"new","","Create a new expression with a starting and ending position",1],[10,"fmt","","",1],[10,"eq","","",2],[10,"ne","","",2],[10,"clone","","",2],[10,"get_assoc","","",2],[10,"get_precedence","","",2],[10,"fmt","","",2],[0,"typer","js_syntax::ast","Typed expression AST"],[3,"resolve_type","js_syntax::ast::typer","Type an expression"],[0,"op","js_syntax::ast","Operations AST"],[2,"NumOp","js_syntax::ast::op","A numeric operation between 2 values"],[12,"OpAdd","","`a + b` - Addition",3],[12,"OpSub","","`a - b` - Subtraction",3],[12,"OpDiv","","`a / b` - Division",3],[12,"OpMul","","`a * b` - Multiplication",3],[12,"OpMod","","`a % b` - Modulus",3],[2,"UnaryOp","","A unary operation on a single value"],[12,"UnaryIncrementPost","","`a++` - increment the value",4],[12,"UnaryIncrementPre","","`++a` - increment the value",4],[12,"UnaryDecrementPost","","`a--` - decrement the value",4],[12,"UnaryDecrementPre","","`--a` - decrement the value",4],[12,"UnaryMinus","","`-a` - negate the value",4],[12,"UnaryPlus","","`+a` - convert to a number",4],[12,"UnaryNot","","`!a` - get the opposite of the boolean value",4],[2,"BitOp","","A bitwise operation between 2 values"],[12,"BitAnd","","`a & b` - Bitwise and",5],[12,"BitOr","","`a | b` - Bitwise or",5],[12,"BitXor","","`a ^ b` - Bitwise xor",5],[12,"BitShl","","`a << b` - Bit-shift leftwards",5],[12,"BitShr","","`a >> b` - Bit-shift rightrights",5],[2,"CompOp","","A comparitive operation between 2 values"],[12,"CompEqual","","`a == b` - Equality",6],[12,"CompNotEqual","","`a != b` - Unequality",6],[12,"CompStrictEqual","","`a === b` - Strict equality",6],[12,"CompStrictNotEqual","","`a !== b` - Strict unequality",6],[12,"CompGreaterThan","","`a > b` - If `a` is greater than `b`",6],[12,"CompGreaterThanOrEqual","","`a >= b` - If `a` is greater than or equal to `b`",6],[12,"CompLessThan","","`a < b` - If `a` is less than `b`",6],[12,"CompLessThanOrEqual","","`a <= b` - If `a` is less than or equal to `b`",6],[2,"LogOp","","A logical operation between 2 boolean values"],[12,"LogAnd","","`a && b` - Logical and",7],[12,"LogOr","","`a || b` - Logical or",7],[2,"BinOp","","A binary operation between 2 values"],[12,"BinNum","","Numeric operation",8],[12,"BinBit","","Bitwise operation",8],[12,"BinComp","","Comparitive operation",8],[12,"BinLog","","Logical operation",8],[6,"Operator","","Represents an operator"],[9,"get_assoc","","Get the associativity as a boolean that is true if it goes rightwards",9],[9,"get_precedence","","Get the precedence as an unsigned integer, where the lower it is, the more precedence/priority it has",9],[10,"get_precedence_and_assoc","","Get the precedence and associativity of this operator",9],[10,"eq","","",3],[10,"ne","","",3],[10,"clone","","",3],[10,"fmt","","",3],[10,"eq","","",4],[10,"ne","","",4],[10,"clone","","",4],[10,"fmt","","",4],[10,"eq","","",5],[10,"ne","","",5],[10,"clone","","",5],[10,"fmt","","",5],[10,"eq","","",6],[10,"ne","","",6],[10,"clone","","",6],[10,"fmt","","",6],[10,"eq","","",7],[10,"ne","","",7],[10,"clone","","",7],[10,"fmt","","",7],[10,"eq","","",8],[10,"ne","","",8],[10,"clone","","",8],[10,"get_assoc","","",8],[10,"get_precedence","","",8],[10,"fmt","","",8],[0,"keyword","js_syntax::ast","Keywords AST"],[2,"Keyword","js_syntax::ast::keyword","A Javascript Keyword"],[12,"KBreak","","The `break` keyword",10],[12,"KCase","","The `case` keyword",10],[12,"KCatch","","The `catch` keyword",10],[12,"KClass","","The `class` keyword, which is reserved for future use",10],[12,"KContinue","","The `continue` keyword",10],[12,"KDebugger","","The `debugger` keyword",10],[12,"KDefault","","The `default` keyword",10],[12,"KDelete","","The `delete` keyword",10],[12,"KDo","","The `do` keyword",10],[12,"KElse","","The `else` keyword",10],[12,"KEnum","","The `enum` keyword",10],[12,"KExtends","","The `extends` keyword",10],[12,"KFinally","","The `finally` keyword",10],[12,"KFor","","The `for` keyword",10],[12,"KFunction","","The `function` keyword",10],[12,"KIf","","The `if` keyword",10],[12,"KIn","","The `in` keyword",10],[12,"KInstanceOf","","The `instanceof` keyword",10],[12,"KImport","","The `import` keyword",10],[12,"KNew","","The `new` keyword",10],[12,"KReturn","","The `return` keyword",10],[12,"KSuper","","The `super` keyword",10],[12,"KSwitch","","The `switch` keyword",10],[12,"KThis","","The `this` keyword",10],[12,"KThrow","","The `throw` keyword",10],[12,"KTry","","The `try` keyword",10],[12,"KTypeOf","","The `typeof` keyword",10],[12,"KVar","","The `var` keyword",10],[12,"KVoid","","The `void` keyword",10],[12,"KWhile","","The `while` keyword",10],[12,"KWith","","The `with` keyword",10],[10,"eq","","",10],[10,"ne","","",10],[10,"clone","","",10],[10,"from_str","","",10],[10,"fmt","","",10],[0,"punc","js_syntax::ast","Punctation AST"],[2,"Punctuator","js_syntax::ast::punc","Punctuation"],[12,"POpenBlock","","`{`",11],[12,"PCloseBlock","","`}`",11],[12,"POpenParen","","`(`",11],[12,"PCloseParen","","`)`",11],[12,"POpenBracket","","`[`",11],[12,"PCloseBracket","","`]`",11],[12,"PDot","","`.`",11],[12,"PSemicolon","","`;`",11],[12,"PComma","","`,`",11],[12,"PLessThan","","`<`",11],[12,"PGreaterThan","","`>`",11],[12,"PLessThanOrEq","","`<=`",11],[12,"PGreaterThanOrEq","","`>=`",11],[12,"PEq","","`==`",11],[12,"PNotEq","","`!=`",11],[12,"PStrictEq","","`===`",11],[12,"PStrictNotEq","","`!==`",11],[12,"PAdd","","`+`",11],[12,"PSub","","`-`",11],[12,"PMul","","`*`",11],[12,"PDiv","","`/`",11],[12,"PMod","","`%`",11],[12,"PInc","","`++`",11],[12,"PDec","","`--`",11],[12,"PLeftSh","","`<<`",11],[12,"PRightSh","","`>>`",11],[12,"PURightSh","","`>>>`",11],[12,"PAnd","","`&`",11],[12,"POr","","`|`",11],[12,"PXor","","`^`",11],[12,"PNot","","`!`",11],[12,"PNeg","","`~`",11],[12,"PBoolAnd","","`&&`",11],[12,"PBoolOr","","`||`",11],[12,"PQuestion","","`?`",11],[12,"PColon","","`:`",11],[12,"PAssign","","`=`",11],[12,"PAssignAdd","","`+=`",11],[12,"PAssignSub","","`-=`",11],[12,"PAssignMul","","`*=`",11],[12,"PAssignDiv","","`/=`",11],[12,"PAssignMod","","`%=`",11],[12,"PAssignLeftSh","","`<<=`",11],[12,"PAssignRightSh","","`>>=`",11],[12,"PAssignURightSh","","`>>>=`",11],[12,"PAssignAnd","","`&=`",11],[12,"PAssignOr","","`|=`",11],[12,"PAssignXor","","`^=`",11],[12,"PArrow","","`=>`",11],[10,"clone","","",11],[10,"eq","","",11],[10,"ne","","",11],[10,"fmt","","",11],[0,"pos","js_syntax::ast","Position AST"],[1,"Position","js_syntax::ast::pos","A position in Javascript source code"],[11,"column_number","","The column number",12],[11,"line_number","","The line number",12],[10,"eq","","",12],[10,"ne","","",12],[10,"clone","","",12],[10,"new","","Create a new position",12],[0,"token","js_syntax::ast","Token AST"],[1,"Token","js_syntax::ast::token","A single of token of Javascript code including its position"],[11,"data","","The token",13],[11,"pos","","The token's position",13],[2,"TokenData","","A single token of Javacript code - a single word, symbol or constant"],[12,"TBooleanLiteral","","A boolean literal, which is either `true` or `false`",14],[12,"TEOF","","The end of the file",14],[12,"TIdentifier","","An identifier",14],[12,"TKeyword","","A keyword",14],[12,"TNullLiteral","","A `null` literal",14],[12,"TNumericLiteral","","A numeric literal",14],[12,"TPunctuator","","A piece of punctuation",14],[12,"TStringLiteral","","A string literal",14],[12,"TRegularExpression","","A regular expression",14],[12,"TComment","","A comment",14],[10,"eq","","",13],[10,"ne","","",13],[10,"clone","","",13],[10,"new","","Create a new detailed token from the token data, line number and column number",13],[10,"fmt","","",13],[10,"eq","","",14],[10,"ne","","",14],[10,"clone","","",14],[10,"fmt","","",14],[0,"types","js_syntax::ast","Typing AST"],[2,"Type","js_syntax::ast::types","Represents a Javascript type at parsing/compilation"],[12,"UndefinedType","","`undefined`",15],[12,"NullType","","`null`",15],[12,"BooleanType","","`boolean`",15],[12,"NumberType","","`number`",15],[12,"IntegerType","","`number`",15],[12,"StringType","","`string`",15],[12,"NativeObjectType","","A native object",15],[12,"FunctionType","","`function`",15],[12,"ObjectType","","`object`",15],[12,"AnyOfType","","Any of these types",15],[12,"AnyType","","Any type",15],[10,"eq","","",15],[10,"ne","","",15],[10,"clone","","",15],[10,"normalise","","Normalise the type",15],[10,"fmt","","",15],[0,"lexer","js_syntax","The lexer, which transforms a string stream into a sequence of tokens"],[1,"Lexer","js_syntax::lexer","A Javascript lexer"],[11,"tokens","","The list of tokens generated so far",16],[11,"line_number","","The current line number in the script",16],[11,"column_number","","The current column number in the script",16],[11,"buffer","","The reader",16],[11,"peek_buffer","","The peeked character buffer",16],[10,"new","","Creates a new lexer with empty buffers",16],[10,"lex_str","","Processes an input stream from a string into an array of tokens",16],[10,"lex","","Processes an input stream from the `buffer` into a vector of tokens",16],[0,"parser","js_syntax","The parser, which transforms a sequence of tokens into expressions"],[1,"Parser","js_syntax::parser","A Javascript parser"],[11,"tokens","","The tokens being input",17],[11,"pos","","The current position within the tokens",17],[2,"ParseError","","An error encountered during parsing an expression"],[12,"Expected","","When it expected a certain kind of token, but got another as part of something",18],[12,"ExpectedExpr","","When it expected a certain expression, but got another",18],[12,"UnexpectedKeyword","","When it didn't expect this keyword",18],[12,"AbruptEnd","","When there is an abrupt end to the parsing",18],[4,"ParseResult","",""],[10,"eq","","",18],[10,"ne","","",18],[10,"clone","","",18],[10,"fmt","","",18],[10,"new","","Creates a new parser, using `tokens` as input",17],[10,"parse_all","","Parse all expressions in the token array",17],[10,"parse","","Parse a single expression",17]],"paths":[[2,"Const"],[1,"Expr"],[2,"ExprDef"],[2,"NumOp"],[2,"UnaryOp"],[2,"BitOp"],[2,"CompOp"],[2,"LogOp"],[2,"BinOp"],[6,"Operator"],[2,"Keyword"],[2,"Punctuator"],[1,"Position"],[1,"Token"],[2,"TokenData"],[2,"Type"],[1,"Lexer"],[1,"Parser"],[2,"ParseError"]]};

searchIndex['js'] = {"items":[[0,"","js","This crate provides a Javascript execution library with an\nJITCompiler and a Javascript standard library."],[0,"run","","The execution engines"],[0,"exec","js::run","Defines the base executor trait which the execution engines derive from"],[3,"execute","js::run::exec","Execute an expression"],[3,"execute_env","","Execute an expression with an environment"],[6,"Executor","","An execution engine"],[9,"new","","Make a new execution engine",0],[9,"set_global","","Set a global variable called `name` with the value `val`",0],[9,"get_global","","Resolve the global variable `name`",0],[9,"compile","","Compile the expression",0],[9,"run","","Run the compiled expression",0],[0,"jit","js::run","Just-In-Time Compilation using libJIT"],[1,"JITCompiler","js::run::jit","A Javascript JIT compiler"],[11,"context","","The JIT Context",1],[11,"global","","An object representing the global object",1],[10,"new","","",1],[10,"set_global","","",1],[10,"get_global","","",1],[10,"compile","","",1],[10,"run","","",1],[0,"stdlib","js","The standard Javascript library"],[0,"value","js::stdlib","Javascript values, utility methods and conversion between Javascript values and Rust values"],[1,"Value","js::stdlib::value","A Garbage-collected Javascript value as represented in the interpreter"],[11,"ptr","","The garbage-collected pointer",2],[2,"ValueData","","A Javascript value"],[12,"VNull","","`null` - A null value, for when a value doesn't exist",3],[12,"VUndefined","","`undefined` - An undefined value, for when a field or index doesn't exist",3],[12,"VBoolean","","`boolean` - A `true` / `false` value, for if a certain criteria is met",3],[12,"VString","","`String` - A UTF-8 string, such as `\"Hello, world\"`",3],[12,"VNumber","","`Number` - A 64-bit floating point number, such as `3.1415`",3],[12,"VInteger","","`Number` - A 32-bit integer, such as `42`",3],[12,"VObject","","`Object` - An object, such as `Math`, represented by a binary tree of string keys to Javascript values",3],[12,"VFunction","","`Function` - A runnable block of code, such as `Math.sqrt`, which can take some variables and return a useful value or act upon an object",3],[3,"from_value","","A utility function that just calls FromValue::from_value"],[3,"to_value","","A utility function that just calls ToValue::to_value"],[4,"ResultValue","","The result of a Javascript expression is represented like this so it can succeed (`Ok`) or fail (`Err`)"],[6,"ToValue","","Conversion to Javascript values from Rust values"],[9,"to_value","","Convert this value to a Rust value",4],[6,"FromValue","","Conversion to Rust values from Javascript values"],[9,"from_value","","Convert this value to a Javascript value",5],[10,"clone","","",2],[10,"clone","","",3],[10,"new_obj","","Returns a new empty object",2],[10,"is_object","","Returns true if the value is an object",2],[10,"is_undefined","","Returns true if the value is undefined",2],[10,"is_null","","Returns true if the value is null",2],[10,"is_null_or_undefined","","Returns true if the value is null or undefined",2],[10,"is_double","","Returns true if the value is a 64-bit floating-point number",2],[10,"is_string","","Returns true if the value is a string",2],[10,"is_true","","Returns true if the value is true",2],[10,"to_num","","Converts the value into a 64-bit floating point number",2],[10,"to_int","","Converts the value into a 32-bit integer",2],[10,"get_prop","","Resolve the property in the object",2],[10,"get_field","","Resolve the property in the object and get its value, or undefined if this is not an object or the field doesn't exist",2],[10,"get_field_slice","","Resolve the property in the object and get its value, or undefined if this is not an object or the field doesn't exist",2],[10,"set_field","","Set the field in the value",2],[10,"set_field_slice","","Set the field in the value",2],[10,"set_prop","","Set the property in the value",2],[10,"set_prop_slice","","Set the property in the value",2],[10,"from_json","","Convert from a JSON value to a JS value",2],[10,"get_type","","Get the type of the value",2],[10,"undefined","","Get the value for undefined",2],[10,"fmt","","",2],[10,"eq","","",2],[10,"to_json","","",2],[10,"add","","",2],[10,"sub","","",2],[10,"mul","","",2],[10,"div","","",2],[10,"rem","","",2],[10,"bitand","","",2],[10,"bitor","","",2],[10,"bitxor","","",2],[10,"shl","","",2],[10,"shr","","",2],[10,"not","","",2],[10,"neg","","",2],[10,"lt","","",2],[10,"le","","",2],[10,"gt","","",2],[10,"ge","","",2],[10,"to_value","collections::string","",6],[10,"from_value","","",6],[10,"to_value","collections::vec","",7],[10,"from_value","","",7],[10,"to_value","serialize::json","",8],[10,"from_value","","",8],[10,"to_value","core::option","",9],[10,"from_value","","",9],[0,"function","js::stdlib","The global `Function` object and function value representations"],[1,"Function","js::stdlib::function","A Javascript function"],[11,"object","","The fields associated with the function",10],[11,"repr","","This function's JIT representation",10],[11,"args","","The argument names of the function",10],[3,"_create","","Create a new `Function` object"],[3,"init","","Initialise the global object with the `Function` object"],[4,"FunctionData","",""],[10,"clone","","",10],[10,"new","","Make a new function",10],[10,"make","","Create a function from function data and arguments",10],[10,"call","","Call with some args",10],[0,"object","js::stdlib","The global `Object` object"],[1,"Property","js::stdlib::object","A Javascript property"],[11,"configurable","","If the type of this can be changed and this can be deleted",11],[11,"enumerable","","If the property shows up in enumeration of the object",11],[11,"writable","","If this property can be changed with an assignment",11],[11,"value","","The value associated with the property",11],[11,"get","","The function serving as getter",11],[11,"set","","The function serving as setter",11],[3,"make_object","","Create a new object"],[3,"get_proto_of","","Get the prototype of an object"],[3,"set_proto_of","","Set the prototype of an object"],[3,"define_prop","","Define a property in an object"],[3,"to_string","","To string"],[3,"has_own_prop","","Check if it has a property"],[3,"_create","","Create a new `Object` object"],[3,"init","","Initialise the `Object` object on the global object"],[4,"ObjectData","",""],[5,"PROTOTYPE","",""],[5,"INSTANCE_PROTOTYPE","",""],[10,"clone","","",11],[10,"new","","Make a new property with the given value",11],[10,"to_value","","",11],[10,"from_value","","",11],[0,"array","js::stdlib","The global `Array` object"],[3,"make_array","js::stdlib::array","Create a new array"],[3,"_create","","Create a new `Array` object"],[3,"init","","Initialise the global object with the `Array` object"],[0,"console","js::stdlib","The global `console` object"],[3,"log","js::stdlib::console","Print a javascript value to the standard output stream"],[3,"error","","Print a javascript value to the standard error stream"],[3,"_create","","Create a new `console` object"],[3,"init","","Initialise the global object with the `console` object"],[0,"math","js::stdlib","The global `Math` object"],[3,"abs","js::stdlib::math","Get the absolute value of a number"],[3,"acos","","Get the arccos of a number"],[3,"asin","","Get the arcsine of a number"],[3,"atan","","Get the arctangent of a number"],[3,"atan2","","Get the arctangent of a numbers"],[3,"cbrt","","Get the cubic root of a number"],[3,"ceil","","Get lowest integer above a number"],[3,"cos","","Get the cosine of a number"],[3,"exp","","Get the power to raise the natural logarithm to get the number"],[3,"floor","","Get the highest integer below a number"],[3,"log","","Get the natural logarithm of a number"],[3,"max","","Get the maximum of several numbers"],[3,"min","","Get the minimum of several numbers"],[3,"pow","","Raise a number to a power"],[3,"_random","","Generate a random floating-point number between 0 and 1"],[3,"round","","Round a number to the nearest integer"],[3,"sin","","Get the sine of a number"],[3,"sqrt","","Get the square root of a number"],[3,"tan","","Get the tangent of a number"],[3,"_create","","Create a new `Math` object"],[3,"init","","Initialise the `Math` object on the global object"],[0,"json","js::stdlib","The global `JSON` object"],[3,"parse","js::stdlib::json","Parse a JSON string into a Javascript object"],[3,"stringify","","Process a Javascript object into a JSON string"],[3,"_create","","Create a new `JSON` object"],[3,"init","","Initialise the global object with the `JSON` object"],[0,"number","js::stdlib","The global `Number` object with related functions and constants"],[3,"parse_float","js::stdlib::number","Parse a float into a value"],[3,"parse_int","","Parse an int into a value"],[3,"is_finite","","Check if a value when converted to a number is finite"],[3,"strict_is_finite","","Check if a number is finite"],[3,"is_nan","","Check if a value when converted to a number is equal to NaN"],[3,"strict_is_nan","","Check if a number is equal to NaN"],[3,"_create","","Create a new `Number` object"],[3,"init","","Initialise the parse functions and `Number` on the global object"],[0,"error","js::stdlib","The global `Error` object"],[3,"make_error","js::stdlib::error","Create a new error"],[3,"to_string","","Get the string representation of the error"],[3,"_create","","Create a new `Error` object"],[3,"init","","Initialise the global object with the `Error` object"],[0,"uri","js::stdlib","Contains global methods concerning URIs"],[3,"encode_uri","js::stdlib::uri","Encode a URI"],[3,"encode_uri_component","","Encode a URI component\nRust uses RFC 3986, but standard Javascript doesn't, this will need a fix"],[3,"decode_uri","","Decode a URI"],[3,"decode_uri_component","","Decode a URI component\nRust uses RFC 3986, but standard Javascript doesn't, this will need a fix"],[3,"init","","Initialise the URI functions on the global object"],[0,"string","js::stdlib","The global `String` object"],[3,"make_string","js::stdlib::string","Create new string"],[3,"get_string_length","","Get a string's length"],[3,"_create","","Create a new `String` object"],[3,"init","","Initialise the `String` object on the global object"],[10,"to_value","js::stdlib::object","",12],[10,"from_value","","",12]],"paths":[[6,"Executor"],[1,"JITCompiler"],[1,"Value"],[2,"ValueData"],[6,"ToValue"],[6,"FromValue"],[1,"String"],[1,"Vec"],[2,"Json"],[2,"Option"],[1,"Function"],[1,"Property"],[4,"ObjectData"]]};

initSearch(searchIndex);
