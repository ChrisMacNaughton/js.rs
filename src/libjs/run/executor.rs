use stdlib::value::{
	Value, 
	ResultValue
};

/** An execution engine which runs the native code
 * generated by the `Compiler`
*/
pub trait Executor<Compiled> {
	/// Get the global object associated with this executor
	fn get_global_obj(&self) -> Value;
	#[inline]
	/// Get a field of the global object
	fn get_global(&self, field: String) -> Value {
		self.get_global_obj().get_field(field)
	}
	#[inline]
	/// Set a field of the global object
	fn set_global(&self, field: String, value:Value) -> Value {
		self.get_global_obj().set_field(field, value)
	}
	/// Execute a compiled expression
	fn execute(&self, comp:&Compiled) -> ResultValue;
}